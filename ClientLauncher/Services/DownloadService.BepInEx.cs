using System;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Threading.Tasks;
using ClientLauncher.Models;

namespace ClientLauncher.Services
{
    public partial class DownloadService
    {
        public static readonly string[] BepinexAutoGeneratedFiles =
        {
            Path.Combine("BepInEx", "cache"),
            Path.Combine("BepInEx", "unhollowed"),
            Path.Combine("BepInEx", "patchers"),
            Path.Combine("BepInEx", "plugins")
        };
        
        public static async ValueTask DownloadBepInExAsync(GameInstall install)
        {
            var latest = await Context.GithubClient.Repository.Release
                .GetLatest(Context.BepInExGithubOrg, Context.BepInExGithubRepo);

            if (latest is null)
                throw new InvalidOperationException("Couldn't fetch release for BepInEx");

            // TODO: does not check the case where currently installed version does not have all files
            Console.WriteLine(latest.Id);
            Console.WriteLine(GameVersionService.BepInExVersion(install));
            if (latest.Id > GameVersionService.BepInExVersion(install))
            {
                var releaseAsset = latest.Assets.First(x => x.Name.Contains("BepInEx"));

                var downloadedZip = await Context.ApiClient.DownloadFileAsync(releaseAsset.BrowserDownloadUrl);

                CleanInstalledBepInEx(install);
                ZipFile.ExtractToDirectory(downloadedZip.FullName, install.Location);

                await File.WriteAllTextAsync(install.BepInExVersionFile, latest.Id.ToString());
            }
        }

        private static void CleanInstalledBepInEx(GameInstall install)
        {
            foreach (var file in GameIntegrityService.BepinexFiles.Concat(BepinexAutoGeneratedFiles))
            {
                var fullPath = Path.Combine(install.Location, file);
                if (File.Exists(fullPath))
                    File.Delete(fullPath);

                if (Directory.Exists(fullPath))
                    Directory.Delete(fullPath, true);
            }
        }
    }
}